/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with exceptions for public feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user. (NOW REQUIRES WHITELIST FOR CREATE)
 * - /whitelist/{email}: List of paid users. Locked down to manual access only.
 * * Key Security Decisions:
 * - The 'create' action on /users/{userId} is the main payment gate.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // NEW FUNCTION: Checks the /whitelist collection using the user's email address.
    function isWhitelisted() {
      // Access is granted if a document with the user's email as the ID exists in the 'whitelist' collection.
      return isSignedIn() && exists(/databases/$(database)/documents/whitelist/$(request.auth.token.email));
    }

    // =========================================================================
    // 1. THE WHITELIST LOCKBOX: /whitelist/{email}
    // =========================================================================

    /**
     * @description Locks down the whitelist completely. Only backend access allowed.
     * @path /whitelist/{email}
     */
    match /whitelist/{email} {
      allow read, write: if false; 
    }

    // =========================================================================
    // 2. USER PROFILES (The Sign-Up Gate)
    // =========================================================================

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @principle **MODIFIED:** Enforces whitelist for creating the initial profile document.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      
      // *** THE CORE PAYMENT GATE IS HERE ***
      // Only allow creation if the user is the owner AND their email is on the whitelist.
      allow create: if isOwner(userId) && isWhitelisted() && request.resource.data.id == userId;
      
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // =========================================================================
    // 3. SUBCOLLECTIONS (No functional changes needed)
    // =========================================================================

    /**
     * @description Controls access to user notes.
     * @path /users/{userId}/notes/{noteId}
     * @principle Enforces document ownership for notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user practice sessions.
     * @path /users/{userId}/practiceSessions/{sessionId}
     * @principle Enforces document ownership for practice sessions.
     */
    match /users/{userId}/practiceSessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user mistakes.
     * @path /users/{userId}/mistakes/{mistakeId}
     * @principle Enforces document ownership for mistakes.
     */
    match /users/{userId}/mistakes/{mistakeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user custom goals.
     * @path /users/{userId}/customGoals/{goalId}
     * @principle Enforces document ownership for custom goals.
     */
    match /users/{userId}/customGoals/{goalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // =========================================================================
    // 4. PUBLIC FEEDBACK (No functional changes needed)
    // =========================================================================

    /**
     * @description Controls access to quiz feedback.
     * @path /feedback/{feedbackId}
     * @principle Allows public read access to feedback while restricting write access to authenticated users.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}
